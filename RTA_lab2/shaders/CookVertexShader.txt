#version 330

in vec3 vertex_position;
in vec3 vertex_normal;

out vec3 LightIntensity;

vec3 lightPosition = vec3 (5.0, 3.0, 0.0); // Light position in world coords.
vec3 lightColor = vec3(200.0, 200.0, 200.0);

uniform vec3 color;
uniform vec3 cameraPos;
uniform mat4 view;
uniform mat4 proj;
uniform mat4 model;
uniform float metallic;
uniform float roughness;

vec3 FagPos = vec3(model * vec4(vertex_position,1.0));
vec3 norm = normalize(mat3(transpose(inverse(model)))*vertex_normal);
vec3 lightDir = normalize(lightPosition-FagPos);
vec3 viewDir = normalize(cameraPos-FagPos); 

const float PI = 3.14159265359;

vec3 F0 = mix(vec3(0.04), color, metallic);

// calculate per-light radiance
vec3 H = normalize(viewDir + lightDir);
float distance = length(lightPosition - FagPos);
float attenuation = 1.0 / (distance * distance);
vec3 radiance = lightColor * attenuation;

// Cook-Torrance BRDF
float a = roughness*roughness;
float NdotH = max(dot(norm, H), 0.0);
float denom = (NdotH*NdotH * (a*a - 1.0) + 1.0);
float NDF = a*a / (PI * denom * denom);

float NdotV = max(dot(norm, viewDir), 0.0);
float NdotL = max(dot(norm, lightDir), 0.0);
float k = ((roughness + 1.0)*(roughness + 1.0)) / 8.0;
float G = NdotV*NdotL / ((NdotV * (1.0 - k) + k)*(NdotL * (1.0 - k) + k));
vec3 KS = F0 + (1.0 - F0) * pow(clamp(1.0 - clamp(dot(H, viewDir), 0.0, 1.0), 0.0, 1.0), 5.0);
vec3 numerator    = NDF * G * KS;
float denominator = 4.0 * NdotV * NdotL + 0.0001; // + 0.0001 to prevent divide by zero
vec3 specular = numerator / denominator;

vec3 kD = (vec3(1.0) - KS)*(1.0 - metallic);

vec3 Lo = (kD * color / PI + specular) * radiance * NdotL; 
  
vec3 ambient = vec3(0.03) * color;
vec3 Ncolor = ambient + Lo;

void main(){ 
   // HDR tonemapping
   Ncolor = Ncolor / (Ncolor + vec3(1.0));
   // gamma correct
   LightIntensity = pow(Ncolor, vec3(1.0/2.2));
   // Convert position to clip coordinates and pass along
   gl_Position =  proj * view * model * vec4(vertex_position,1.0);
}


